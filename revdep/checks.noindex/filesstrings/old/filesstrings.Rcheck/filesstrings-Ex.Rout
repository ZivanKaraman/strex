
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "filesstrings"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('filesstrings')
Loading required package: stringr
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("all_equal")
> ### * all_equal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: all_equal
> ### Title: An alternative version of 'base::all.equal()'.
> ### Aliases: all_equal
> 
> ### ** Examples
> 
> all_equal(1, rep(1, 3))
[1] TRUE
> all_equal(2, 1:3)
[1] FALSE
> all_equal(1:4, 1:4)
[1] TRUE
> all_equal(1:4, c(1, 2, 3, 3))
[1] FALSE
> all_equal(rep(1, 10))
[1] TRUE
> all_equal(c(1, 88))
[1] FALSE
> all_equal(1:2)
[1] FALSE
> all_equal(list(1:2))
[1] TRUE
> all_equal(1:4, matrix(1:4, nrow = 2)) # note that this gives TRUE
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("create_dir")
> ### * create_dir
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_dir
> ### Title: Create directories if they don't already exist
> ### Aliases: create_dir
> 
> ### ** Examples
> 
> ## Not run: 
> ##D create_dir(c("mydir", "yourdir"))
> ##D remove_dir(c("mydir", "yourdir"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("extend_char_vec")
> ### * extend_char_vec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extend_char_vec
> ### Title: Pad a character vector with empty strings.
> ### Aliases: extend_char_vec str_extend_char_vec
> 
> ### ** Examples
> 
> extend_char_vec(1:5, extend_by = 2)
[1] "1" "2" "3" "4" "5" ""  "" 
> extend_char_vec(c("a", "b"), length_out = 10)
 [1] "a" "b" ""  ""  ""  ""  ""  ""  ""  "" 
> 
> 
> 
> cleanEx()
> nameEx("group_close")
> ### * group_close
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: group_close
> ### Title: Group together close adjacent elements of a vector.
> ### Aliases: group_close
> 
> ### ** Examples
> 
> group_close(1:10, 1)
[[1]]
 [1]  1  2  3  4  5  6  7  8  9 10

> group_close(1:10, 0.5)
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 4

[[5]]
[1] 5

[[6]]
[1] 6

[[7]]
[1] 7

[[8]]
[1] 8

[[9]]
[1] 9

[[10]]
[1] 10

> group_close(c(1, 2, 4, 10, 11, 14, 20, 25, 27), 3)
[[1]]
[1] 1 2 4

[[2]]
[1] 10 11 14

[[3]]
[1] 20

[[4]]
[1] 25 27

> 
> 
> 
> cleanEx()
> nameEx("move_files")
> ### * move_files
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: move_files
> ### Title: Move files around.
> ### Aliases: move_files file.move
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dir.create("dir")
> ##D files <- c("1litres_1.txt", "1litres_30.txt", "3litres_5.txt")
> ##D file.create(files)
> ##D file.move(files, "dir")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("nice_file_nums")
> ### * nice_file_nums
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nice_file_nums
> ### Title: Make file numbers comply with alphabetical order
> ### Aliases: nice_file_nums
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dir.create("NiceFileNums_test")
> ##D setwd("NiceFileNums_test")
> ##D files <- c("1litres_1.txt", "1litres_30.txt", "3litres_5.txt")
> ##D file.create(files)
> ##D nice_file_nums()
> ##D nice_file_nums(pattern = "\\.txt$")
> ##D setwd("..")
> ##D dir.remove("NiceFileNums_test")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("put_in_pos")
> ### * put_in_pos
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: put_in_pos
> ### Title: Put specified strings in specified positions in an otherwise
> ###   empty character vector.
> ### Aliases: put_in_pos str_put_in_pos
> 
> ### ** Examples
> 
> put_in_pos(1:3, c(1, 8, 9))
[1] "1" ""  ""  ""  ""  ""  ""  "2" "3"
> put_in_pos(c("Apple", "Orange", "County"), c(5, 7, 8))
[1] ""       ""       ""       ""       "Apple"  ""       "Orange" "County"
> put_in_pos(1:2, 5)
[1] ""  ""  ""  ""  "1" "2"
> 
> 
> 
> cleanEx()
> nameEx("remove_dir")
> ### * remove_dir
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: remove_dir
> ### Title: Remove directories
> ### Aliases: remove_dir dir.remove
> 
> ### ** Examples
> 
> ## Not run: 
> ##D sapply(c("mydir1", "mydir2"), dir.create)
> ##D remove_dir(c("mydir1", "mydir2"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("remove_filename_spaces")
> ### * remove_filename_spaces
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: remove_filename_spaces
> ### Title: Remove spaces in file names
> ### Aliases: remove_filename_spaces
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dir.create("RemoveFileNameSpaces_test")
> ##D setwd("RemoveFileNameSpaces_test")
> ##D files <- c("1litres 1.txt", "1litres 30.txt", "3litres 5.txt")
> ##D file.create(files)
> ##D remove_filename_spaces()
> ##D list.files()
> ##D setwd("..")
> ##D dir.remove("RemoveFileNameSpaces_test")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rename_with_nums")
> ### * rename_with_nums
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rename_with_nums
> ### Title: Replace file names with numbers
> ### Aliases: rename_with_nums
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dir.create("RenameWithNums_test")
> ##D setwd("RenameWithNums_test")
> ##D files <- c("1litres 1.txt", "1litres 30.txt", "3litres 5.txt")
> ##D file.create(files)
> ##D rename_with_nums()
> ##D list.files()
> ##D setwd("..")
> ##D dir.remove("RenameWithNums_test")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("unitize_dirs")
> ### * unitize_dirs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unitize_dirs
> ### Title: Put files with the same unit measurements into directories
> ### Aliases: unitize_dirs
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dir.create("UnitDirs_test")
> ##D setwd("UnitDirs_test")
> ##D files <- c("1litres_1.txt", "1litres_3.txt", "3litres.txt", "5litres_1.txt")
> ##D file.create(files)
> ##D unitize_dirs("litres", "\\.txt")
> ##D setwd("..")
> ##D dir.remove("UnitDirs_test")
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.878 0.071 1.002 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
